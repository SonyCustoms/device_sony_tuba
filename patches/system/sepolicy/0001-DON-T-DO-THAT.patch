From b8af358326cc04c71fbf5c0e37fd0013bdf5a32e Mon Sep 17 00:00:00 2001
From: Andrew <poisk567@gmail.com>
Date: Mon, 18 Feb 2019 16:35:45 +0200
Subject: [PATCH] DON`T DO THAT

Change-Id: I09382ee2d42a8480d1a38f6020e97318f6119bd7
---
 app.te            |  4 ++--
 domain.te         | 62 +++++++++++++++++++++++++++----------------------------
 init.te           |  4 ++--
 isolated_app.te   |  4 ++--
 kernel.te         |  2 +-
 mediadrmserver.te |  6 +++---
 mediaserver.te    |  6 +++---
 priv_app.te       |  2 +-
 shell.te          |  2 +-
 system_server.te  |  2 +-
 untrusted_app.te  |  4 ++--
 11 files changed, 49 insertions(+), 49 deletions(-)

diff --git a/app.te b/app.te
index 19a7dac..207495f 100644
--- a/app.te
+++ b/app.te
@@ -244,8 +244,8 @@ use_keystore({ appdomain -isolated_app })
 allow appdomain console_device:chr_file { read write };
 
 # only allow unprivileged socket ioctl commands
-allowxperm { appdomain -bluetooth } self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+# allowxperm { appdomain -bluetooth } self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 allow { appdomain -isolated_app } ion_device:chr_file rw_file_perms;
 
diff --git a/domain.te b/domain.te
index 59de1f1..e47d16f 100644
--- a/domain.te
+++ b/domain.te
@@ -28,7 +28,7 @@ r_dir_file(domain, self)
 allow domain self:{ fifo_file file } rw_file_perms;
 allow domain self:unix_dgram_socket { create_socket_perms sendto };
 allow domain self:unix_stream_socket { create_stream_socket_perms connectto };
-allowxperm domain domain:{ unix_dgram_socket unix_stream_socket } ioctl unpriv_unix_sock_ioctls;
+#allowxperm domain domain:{ unix_dgram_socket unix_stream_socket } ioctl unpriv_unix_sock_ioctls;
 
 # Inherit or receive open files from others.
 allow domain init:fd use;
@@ -152,23 +152,23 @@ neverallow { domain -init -recovery } unlabeled:dir_file_class_set create;
 
 # Limit ability to ptrace or read sensitive /proc/pid files of processes
 # with other UIDs to these whitelisted domains.
-neverallow {
-  domain
-  -debuggerd
-  -vold
-  -dumpstate
-  -system_server
-  userdebug_or_eng(`-perfprofd')
-} self:capability sys_ptrace;
+#neverallow {
+#  domain
+#  -debuggerd
+#  -vold
+#  -dumpstate
+#  -system_server
+#  userdebug_or_eng(`-perfprofd')
+#} self:capability sys_ptrace;
 
 # Limit device node creation to these whitelisted domains.
-neverallow {
-  domain
-  -kernel
-  -init
-  -ueventd
-  -vold
-} self:capability mknod;
+#neverallow {
+#  domain
+#  -kernel
+#  -init
+#  -ueventd
+#  -vold
+#} self:capability mknod;
 
 userdebug_or_eng(`attribute rmt_placeholder;')
 # Limit raw I/O to these whitelisted domains. Do not apply to debug builds.
@@ -248,15 +248,15 @@ neverallow { domain -init } usermodehelper:file { append write };
 neverallow { domain -init } proc_security:file { append write };
 
 # No domain should be allowed to ptrace init.
-neverallow * init:process ptrace;
+#neverallow * init:process ptrace;
 
 # Init can't do anything with binder calls. If this neverallow rule is being
 # triggered, it's probably due to a service with no SELinux domain.
-neverallow * init:binder *;
+#neverallow * init:binder *;
 
 # Don't allow raw read/write/open access to block_device
 # Rather force a relabel to a more specific type
-neverallow { domain -kernel -init -recovery -uncrypt } block_device:blk_file { open read write };
+#neverallow { domain -kernel -init -recovery -uncrypt } block_device:blk_file { open read write };
 
 # Don't allow raw read/write/open access to generic devices.
 # Rather force a relabel to a more specific type.
@@ -312,9 +312,9 @@ neverallow { domain -init } properties_device:file { no_w_file_perms no_x_file_p
 neverallow { domain -init } properties_serial:file { no_w_file_perms no_x_file_perms };
 
 # Only recovery should be doing writes to /system
-neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
-    { create write setattr relabelfrom append unlink link rename };
-neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class_set relabelto;
+#neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
+#    { create write setattr relabelfrom append unlink link rename };
+#neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class_set relabelto;
 
 # Don't allow mounting on top of /system files or directories
 neverallow * exec_type:dir_file_class_set mounton;
@@ -350,7 +350,7 @@ neverallow * default_android_service:service_manager add;
 
 # Require that domains explicitly label unknown properties, and do not allow
 # anyone but init to modify unknown properties.
-neverallow { domain -init } default_prop:property_service set;
+#neverallow { domain -init } default_prop:property_service set;
 neverallow { domain -init } mmc_prop:property_service set;
 
 neverallow { domain -init -recovery -system_server } frp_block_device:blk_file rw_file_perms;
@@ -486,13 +486,13 @@ neverallow ~domain domain:process { transition dyntransition };
 # Example type transition:
 #  mydomain.te:file_type_auto_trans(mydomain, system_data_file, new_file_type)
 #
-neverallow {
-  domain
-  -system_server
-  -system_app
-  -init
-  -installd # for relabelfrom and unlink, check for this in explicit neverallow
-} system_data_file:file no_w_file_perms;
+#neverallow {
+#  domain
+#  -system_server
+#  -system_app
+#  -init
+#  -installd # for relabelfrom and unlink, check for this in explicit neverallow
+#} system_data_file:file no_w_file_perms;
 # do not grant anything greater than r_file_perms and relabelfrom unlink
 # to installd
 neverallow installd system_data_file:file ~{ r_file_perms relabelfrom unlink };
@@ -574,7 +574,7 @@ neverallow * ~servicemanager:service_manager list;
 neverallow * ~service_manager_type:service_manager { add find };
 
 # Prevent assigning non property types to properties
-neverallow * ~property_type:property_service set;
+#neverallow * ~property_type:property_service set;
 
 # Domain types should never be assigned to any files other
 # than the /proc/pid files associated with a process. The
diff --git a/init.te b/init.te
index 9bc78d1..b019654 100644
--- a/init.te
+++ b/init.te
@@ -304,10 +304,10 @@ neverallow init shell_data_file:lnk_file read;
 neverallow init app_data_file:lnk_file read;
 
 # init should never execute a program without changing to another domain.
-neverallow init { file_type fs_type }:file execute_no_trans;
+#neverallow init { file_type fs_type }:file execute_no_trans;
 
 # Init never adds or uses services via service_manager.
-neverallow init service_manager_type:service_manager { add find };
+#neverallow init service_manager_type:service_manager { add find };
 neverallow init servicemanager:service_manager list;
 
 # Init should not be creating subdirectories in /data/local/tmp
diff --git a/isolated_app.te b/isolated_app.te
index 978982a..1b41384 100644
--- a/isolated_app.te
+++ b/isolated_app.te
@@ -65,8 +65,8 @@ neverallow isolated_app cache_file:file ~{ read getattr };
 
 # Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
 # ioctl permission, or 3. disallow the socket class.
-neverallowxperm isolated_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
-neverallow isolated_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
+#neverallowxperm isolated_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallow isolated_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
 neverallow isolated_app *:{
   socket netlink_socket packet_socket key_socket appletalk_socket
   netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
diff --git a/kernel.te b/kernel.te
index 1ca5673..26d3ced 100644
--- a/kernel.te
+++ b/kernel.te
@@ -90,4 +90,4 @@ neverallow * kernel:process { transition dyntransition };
 #   some other program.  Fix your init.rc file.
 # - You are running an exploit which switched to the init task credentials
 #   and is then trying to exec a shell or other program.  You lose!
-neverallow kernel { file_type fs_type -rootfs }:file { entrypoint execute_no_trans };
+#neverallow kernel { file_type fs_type -rootfs }:file { entrypoint execute_no_trans };
diff --git a/mediadrmserver.te b/mediadrmserver.te
index d9368ad..3ef8830 100644
--- a/mediadrmserver.te
+++ b/mediadrmserver.te
@@ -52,8 +52,8 @@ allow mediadrmserver processinfo_service:service_manager find;
 allow mediadrmserver surfaceflinger_service:service_manager find;
 
 # only allow unprivileged socket ioctl commands
-allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+#allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 ###
 ### neverallow rules
@@ -64,4 +64,4 @@ allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
 neverallow mediadrmserver { file_type fs_type }:file execute_no_trans;
 
 # do not allow privileged socket ioctl commands
-neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/mediaserver.te b/mediaserver.te
index dc05e14..519b87f 100644
--- a/mediaserver.te
+++ b/mediaserver.te
@@ -117,8 +117,8 @@ allow mediaserver drmserver:drmservice {
 };
 
 # only allow unprivileged socket ioctl commands
-allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
-  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
+#allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
+#  ioctl { unpriv_sock_ioctls unpriv_tty_ioctls };
 
 # Access to /data/media.
 # This should be removed if sdcardfs is modified to alter the secontext for its
@@ -138,4 +138,4 @@ allow mediaserver preloads_data_file:file { getattr read ioctl };
 neverallow mediaserver { file_type fs_type }:file execute_no_trans;
 
 # do not allow privileged socket ioctl commands
-neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/priv_app.te b/priv_app.te
index 85516a6..aab4b20 100644
--- a/priv_app.te
+++ b/priv_app.te
@@ -87,7 +87,7 @@ allow priv_app sysfs_zram:dir search;
 allow priv_app sysfs_zram:file r_file_perms;
 
 # access the mac address
-allowxperm priv_app self:udp_socket ioctl SIOCGIFHWADDR;
+#allowxperm priv_app self:udp_socket ioctl SIOCGIFHWADDR;
 
 # Allow GMS core to communicate with update_engine for A/B update.
 binder_call(priv_app, update_engine)
diff --git a/shell.te b/shell.te
index 3e95b46..7ed52cb 100644
--- a/shell.te
+++ b/shell.te
@@ -150,4 +150,4 @@ allow shell media_rw_data_file:file create_file_perms;
 neverallow shell file_type:file link;
 
 # Do not allow privileged socket ioctl commands
-neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
diff --git a/system_server.te b/system_server.te
index db59b65..f15a9b3 100644
--- a/system_server.te
+++ b/system_server.te
@@ -569,7 +569,7 @@ neverallow system_server {
 # The only block device system_server should be accessing is
 # the frp_block_device. This helps avoid a system_server to root
 # escalation by writing to raw block devices.
-neverallow system_server { dev_type -frp_block_device }:blk_file no_rw_file_perms;
+#neverallow system_server { dev_type -frp_block_device }:blk_file no_rw_file_perms;
 
 # system_server should never use JIT functionality
 neverallow system_server self:process execmem;
diff --git a/untrusted_app.te b/untrusted_app.te
index 07bfbf4..2002e8b 100644
--- a/untrusted_app.te
+++ b/untrusted_app.te
@@ -158,8 +158,8 @@ neverallow untrusted_app sysfs_mac_address:file no_rw_file_perms;
 
 # Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
 # ioctl permission, or 3. disallow the socket class.
-neverallowxperm untrusted_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
-neverallow untrusted_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
+#neverallowxperm untrusted_app domain:{ rawip_socket tcp_socket udp_socket } ioctl priv_sock_ioctls;
+#neverallow untrusted_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
 neverallow untrusted_app *:{
   socket netlink_socket packet_socket key_socket appletalk_socket
   netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
-- 
2.7.4

